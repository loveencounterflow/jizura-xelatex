// Generated by CoffeeScript 1.8.0
(function() {
  var CHR, MULTIMIX, TEX, THIS, TRM, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, read, route_of_postscript, route_of_preamble, rpr, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'XLTX';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  njs_fs = require('fs');

  njs_path = require('path');

  TRM = require('coffeenode-trm');

  CHR = require('coffeenode-chr');

  read = function(route) {
    return njs_fs.readFileSync(njs_path.join(__dirname, route), 'utf-8');
  };

  TEX = require('coffeenode-tex');

  route_of_preamble = '../tex-inputs/jzr2014-preamble.tex';

  route_of_postscript = '../tex-inputs/jzr2014-postscript.tex';

  this.glyph_tag_by_rsg = {
    'u-latn': TEX.make_command('latin'),
    'u-latn-1': TEX.make_command('latin'),
    'u-cjk': TEX.make_command('cn'),
    'u-halfull': TEX.make_command('cn'),
    'u-dingb': TEX.make_command('cn'),
    'u-cjk-xa': TEX.make_command('cnxa'),
    'u-cjk-xb': TEX.make_command('cnxb'),
    'u-cjk-xc': TEX.make_command('cnxc'),
    'u-cjk-xd': TEX.make_command('cnxd'),
    'u-cjk-cmpi1': TEX.make_command('cncone'),
    'u-cjk-cmpi2': TEX.make_command('cnctwo'),
    'u-cjk-rad1': TEX.make_command('cnrone'),
    'u-cjk-rad2': TEX.make_command('cnrtwo'),
    'u-cjk-sym': TEX.make_command('cnsym'),
    'u-cjk-strk': TEX.make_command('cnstrk'),
    'u-pua': TEX.make_command('cnjzr'),
    'jzr-fig': TEX.make_command('cnjzr'),
    'u-cjk-kata': TEX.make_command('ka'),
    'u-cjk-hira': TEX.make_command('hi'),
    'u-hang-syl': TEX.make_command('hg')
  };

  this.stacked_fncr = TEX.make_multicommand('fncr', 2);

  this._py = TEX.make_command('py');

  this.ka = TEX.make_command('ka');

  this.hi = TEX.make_command('hi');

  this.hg = TEX.make_command('hg');

  this.gloss = TEX.make_command('gloss');

  this.mainentry = TEX.make_command('mainentry');

  this.missing = TEX.make_command('missing');

  this.hbox = TEX.make_command('hbox');

  this.jzrplain = TEX.make_environment('jzrplain');

  this.tabular = TEX.make_environment('tabular');

  this.par = TEX.raw(' \\\\\n');

  this.hirabar = (TEX.make_loner('hirabar'))();

  this.next_cell = TEX.raw(' & ');

  this.new_page = (TEX.make_loner('clearpage'))();

  this.tag_from_chr = function(glyph_styles, chr) {

    /* TAINT not well written */
    var R, chr_info, fncr, rsg, tag;
    chr_info = CHR.analyze(chr, {
      input: 'xncr'
    });
    chr = chr_info.chr, fncr = chr_info.fncr, rsg = chr_info.rsg;
    if ((R = glyph_styles[chr]) != null) {
      return TEX.raw(R);
    }
    if (rsg === 'jzr-fig') {
      return TEX.raw("\\cnjzr{" + chr_info['uchr'] + "}");
    }
    if ((tag = this.glyph_tag_by_rsg[rsg]) == null) {
      warn("unknown RSG " + (rpr(rsg)) + ": " + fncr + " " + chr);
      return chr_info['chr'];
    }
    return tag(chr_info['chr']);
  };

  this.tag_rpr_from_chr = function(glyph_styles, chr) {
    return TEX.rpr(this.tag_from_chr(glyph_styles, chr));
  };

  this.py = function(text) {
    return this._py(this.raw(this._rewrite_pinyin(text)));
  };

  this._rewrite_pinyin = function(text) {
    var R;
    R = text;
    R = R.replace(/ǖ/, "\\upaccent{\\aboxshift{ˉ}}{ü}");
    R = R.replace(/ǘ/, "\\upaccent{\\aboxshift{´}}{ü}");
    R = R.replace(/ǚ/, "\\upaccent{\\aboxshift{ˇ}}{ü}");
    R = R.replace(/ǜ/, "\\upaccent{\\aboxshift{`}}{ü}");
    R = R.replace(/ê1/, "\\upaccent{\\aboxshift{ˉ}}{ê}");
    R = R.replace(/ê2/, "\\upaccent{\\aboxshift{´}}{ê}");
    R = R.replace(/ê3/, "\\upaccent{\\aboxshift{ˇ}}{ê}");
    R = R.replace(/ê4/, "\\upaccent{\\aboxshift{`}}{ê}");
    return R;
  };

  MULTIMIX = require('coffeenode-multimix');

  THIS = module.exports = MULTIMIX.compose(TEX, this);

  this.rpr = TEX.rpr.bind(TEX);

  THIS.postscript = THIS.raw(read(route_of_postscript));

  THIS.preamble = THIS.raw(read(route_of_preamble));

}).call(this);
